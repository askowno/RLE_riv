---
title: "Riv_EPL"
format: html
---

Preparation

```{r}
# Add packages: 
library(sf)
library(tidyverse)

# Add data

rivers <-st_read("C:/Users/skownoa/Dropbox/NBAwork/Rivers/NBA2025_rivers/NBA2025_River_20250610.shp") #ensure it uses proj =  wgs84 aea cm 25 -24 -33

```

Clean up input data

```{r}

riv <- rivers %>%
  mutate(leng = as.numeric(st_length(geometry))) %>%
  rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
  # clean up non SA type and remove estuaries and foreign segments
  filter(RIVTYPE != "Foreign", PES2018 != "Foreign", PES2024 != "Foreign",
                     PES2018 != "Estuary",  PES2018 != "Estuary") %>%   
  # ensure consistency with Data defic segments  
  mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024                          , PES2018)) %>%
  # Drop geometry to work as a plain table
  st_drop_geometry() 
  

## Note these data extend outside of SA and into estuaries - these segements need to be filtered out when doing computations. 

```

Calculate EOO using convex hulls in sf

```{r}
# Initialize a list to store results
options(scipen = 999)
eoo_list <- list()

riv_eoo <- rivers %>%
  mutate(leng = as.numeric(st_length(geometry))) %>%
  rename(PES2024 = NBA2025_PE) %>% # fix name of PES 2024
  # clean up non SA type and remove estuaries and foreign segments
  filter(RIVTYPE != "Foreign", PES2018 != "Foreign", PES2024 != "Foreign",
                     PES2018 != "Estuary",  PES2018 != "Estuary") %>%   
  # ensure consistency with Data defic segments  
  mutate(PES2018 = ifelse(PES2018 == "Data defic" & PES2024 != "Data defic", PES2024                          , PES2018))

# Iterate through unique T_MAPCODE values 
for (rivcode in unique(riv_eoo$RIVTYPE)) {
  subset_data <- riv_eoo %>% filter(RIVTYPE == rivcode)
  if (nrow(subset_data) > 0) {
    convex_hull <- st_convex_hull(st_union(subset_data))
    hull_area <- st_area(convex_hull)
    eoo_list[[rivcode]] <- as.numeric(hull_area)
  }
}

eoo_df <- data.frame(
  RIVTYPE = names(eoo_list),
  AREA_EOO = unlist(eoo_list)
) %>%
  mutate(eoo_km2 = AREA_EOO/1000000) %>%
  select(!AREA_EOO)

write.csv(eoo_df, "outputs/EOO_all.csv")


```

```{r}

#summarise by River type including segment length per type per condition class - this allows for inclusion of condition in the EPL formula
options(scipen = 999)

#overall summary
riv_type_18 <- riv %>%
    group_by(RIVTYPE, PES2018) %>%
  summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = PES2018, values_from = leng, values_fill = list(leng = 0))  %>%
  mutate(tot_leng18 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))

riv_type_24 <- riv %>%
    group_by(RIVTYPE, PES2024) %>%
  summarise(leng = sum(as.numeric(leng), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = PES2024, values_from = leng, values_fill = list(leng = 0))  %>%
  mutate(tot_leng24 = rowSums(across(c(A, B, C, D, E, F, `Data defic`))))


 
# Join the tables above - this makes a single table in which all the required metric can be found to compute EPL and RLE
 
 riv_type_metrics <- riv_type_18 %>%
   rename(A18=A, B18=B, C18=C, D18=D, E18=E, F18=F, DDef18 = `Data defic`) %>%
  left_join(riv_type_24, by = "RIVTYPE") %>%
    rename(DDef = `Data defic`) %>%
  left_join(eoo_df, by = "RIVTYPE") %>%
    mutate(prp18_cdef = (C18 + D18 + E18 + F18)/tot_leng18) %>%
    mutate(prp18_def = (D18 + E18 + F18 )/tot_leng18) %>%
    mutate(prp18_ef= (E18 + F18)/tot_leng18) %>%
    mutate(prp18_f= F18/tot_leng18) %>%
    mutate(prp24_cdef = (C + D + E + F)/tot_leng24) %>%
    mutate(prp24_def = (D + E + F )/tot_leng24) %>%
    mutate(prp24_ef= (E + F)/tot_leng24) %>%
    mutate(prp24_f= F/tot_leng24) %>%
    mutate(D3_18 = case_when( prp18_ef >= 0.9 ~ "CR", 
                                 prp18_ef >= 0.7 | prp18_def >=0.9 ~ "EN",
                                 prp18_ef >= 0.5 | prp18_def >=0.7 | 
                                                  prp18_cdef >= 0.9 ~ "VU", 
                                 TRUE ~ "LC")) %>% 
    mutate(D3_24 = case_when( prp24_ef >= 0.9 ~ "CR", 
                                 prp24_def >= 0.3 | prp24_def >=0.9 ~ "EN",
                                 prp24_ef >= 0.5 | prp24_def >=0.7 | 
                                                  prp24_cdef >= 0.9 ~ "VU", 
                                 TRUE ~ "LC")) %>%
   mutate(B1_18 = case_when( prp18_def >= 0.3 & eoo_km2  <= 2000 ~ "CR",
                             prp18_def >= 0.3 & eoo_km2  <= 20000 ~ "EN",
                              prp18_def >= 0.3 & eoo_km2  <= 50000 ~ "VU",
                                 TRUE ~ "LC")) %>%
   mutate(B1_24 = case_when( prp24_def >= 0.3 & eoo_km2  <= 2000 ~ "CR",
                             prp24_def >= 0.3 & eoo_km2  <= 20000 ~ "EN",
                              prp24_def >= 0.3 & eoo_km2  <= 50000 ~ "VU",
                                 TRUE ~ "LC")) %>%
   # ensure highest risk cateroy is assiged 
   mutate(RLE_18 = case_when(B1_18 == "CR" | D3_18 == "CR" ~ "CR", 
                             B1_18 == "EN" | D3_18 == "EN" ~ "EN",
                             B1_18 == "VU" | D3_18 == "VU" ~ "VU",
                              TRUE ~ "LC")) %>%
   mutate(RLE_24 = case_when(B1_24 == "CR" | D3_24 == "CR" ~ "CR", 
                             B1_24 == "EN" | D3_24 == "EN" ~ "EN",
                             B1_24 == "VU" | D3_24 == "VU" ~ "VU",
                              TRUE ~ "LC")) %>%
   # add in Nel 2011 and van Deventer 2018 method: SA approach assuming A and B are intact rest is lost but also counting C towards  VU
   
   mutate(A3sa_24 = case_when( prp24_cdef >= 0.8 ~ "CR", 
                              prp24_cdef >= 0.65 ~ "EN",
                              prp24_def >= 0.4 ~ "VU", 
                                 TRUE ~ "LC")) %>%
    mutate(A3sa_18 = case_when( prp18_cdef >= 0.8 ~ "CR", 
                               prp18_cdef >= 0.65 ~ "EN",
                               prp18_def >= 0.4 ~ "VU", 
                                 TRUE ~ "LC")) %>%
     # add in River Zones based on last letter of RIVTYPE
   mutate(zone = case_when(str_ends(RIVTYPE, "U") ~ "Upper foothill",
                           str_ends(RIVTYPE, "L") ~ "Lower foothill", 
                           str_ends(RIVTYPE, "F") ~ "Lowland river", 
                           str_ends(RIVTYPE, "M") ~ "Mountain stream", 
                           TRUE ~  "other")) 
   # export a csv of results - Condition and EPL per river type 2018 and 2024
   write.csv(riv_type_metrics, file = "outputs/rle_riv_metrics_per_type.csv")
   
   
```

RLE for Rivers using IUCN RLE methods

```{r}
# 2018 summaries IUCN RLE approach 
# make summary counts of RLE categories per River Slopes Zones IUCN approach D3
riv_type_metrics <- read_csv("outputs/rle_riv_metrics_per_type.csv") 

rle18_sum <- riv_type_metrics %>%
    group_by(RLE_18, zone) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = RLE_18, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
  # Add EPLindex
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*1))/((CR+EN+VU+LC)*5)))  %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)
 
 # export a csv of results - COUNT of RLE 18 per slope zone
 write.csv(rle18_sum, file = "outputs/rle18_riv_count.csv") 
 
 # 2024 summaries IUCN RLE approach 
# make summary counts of RLE categories per River Slopes Zones IUCN approach D3
  
   # make summary counts of RLE categories per River Slopes Zones using IUCN RLE D3 approach 
 rle24_sum <- riv_type_metrics %>%
    group_by(RLE_24, zone) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = RLE_24, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
  # Add RLE index
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*1))/((CR+EN+VU+LC)*5)))  %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)
 
 # export a csv of results - COUNT of RLE 24 per slope zone
 write.csv(rle24_sum, file = "outputs/rle24_riv_count.csv") 
 
  # make summary of extent of RLE
 rle24_ext <- riv_type_metrics %>%
    group_by(RLE_24, zone) %>%
  summarise(length = round(sum(tot_leng24)/1000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = RLE_24, 
              values_from = length, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write.csv(rle24_ext, file = "outputs/rle24_riv_ext.csv")
  
 # Convert extent per epl category to proportion 
  rle24_prpext <- rle24_ext %>%
  filter(zone != "Total") %>%
  mutate(across(c(CR, EN, VU, LC), ~ round(.x / Total, 3))) %>%
  select(zone, CR, EN, VU, LC)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write.csv(rle24_prpext, file = "outputs/rle24_riv_prp.csv")
   
```

RLE for Rivers using Nel et al. 2011 method

```{r}
# A3 SA methods results 
# COUNTS - summary for 2024 using SA methods 

rle24sa_sum <- riv_type_metrics %>%
    group_by(A3sa_24, zone) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_24, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
  # Add RLE index
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*1))/((CR+EN+VU+LC)*5)))  %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)

  # export a csv of results - PROPORTIONAL EXTENT  (km) of SA RLE 24 per slope zone
   write.csv(rle24sa_sum, file = "outputs/rle24sa_riv_count.csv")

# COUNTS - summary for 2018 using SA methods 
   
rle18sa_sum <- riv_type_metrics %>%
    group_by(A3sa_18, zone) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_18, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
  # Add RLE index
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*1))/((CR+EN+VU+LC)*5)))  %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)

# export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write.csv(rle18sa_sum, file = "outputs/rle18sa_riv_count.csv")
   
#EXENTS - summary for 2024  using SA methods 
  
 rle24sa_ext <- riv_type_metrics %>%
    group_by(A3sa_24, zone) %>%
  summarise(length = round(sum(tot_leng24)/1000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_24, 
              values_from = length, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write.csv(rle24sa_ext, file = "outputs/rle24sa_riv_ext.csv")
  
 # Convert extent per epl category to proportion 
  rle24sa_prpext <- rle24sa_ext %>%
  filter(zone != "Total") %>%
  mutate(across(c(CR, EN, VU, LC), ~ round(.x / Total, 3))) %>%
  select(zone, CR, EN, VU, LC)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write.csv(rle24sa_prpext, file = "outputs/rle24sa_riv_prp.csv") 
   
   #EXENTS - summary for 2018  using SA methods 
  
 rle18sa_ext <- riv_type_metrics %>%
    group_by(A3sa_18, zone) %>%
  summarise(length = round(sum(tot_leng18)/1000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_18, 
              values_from = length, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., zone = "Total", across(where(is.numeric), sum))) %>%
    mutate(zone = factor(zone, levels = c("Total", "Lowland river", "Lower foothill"           , "Upper foothill", "Mountain stream"))) %>% ## ggplot plots inverted factors!
   arrange(zone)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write.csv(rle18sa_ext, file = "outputs/rle18sa_riv_ext.csv")
  
 # Convert extent per epl category to proportion 
  rle18sa_prpext <- rle18sa_ext %>%
  filter(zone != "Total") %>%
  mutate(across(c(CR, EN, VU, LC), ~ round(.x / Total, 3))) %>%
  select(zone, CR, EN, VU, LC)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write.csv(rle18sa_prpext, file = "outputs/rle18sa_riv_prp.csv") 
```

#### **Make graphs for NBA**

```{r}

# load nbaR package : first run this in console devtools::install_github("SANBI-NBA/nbaR") 
library(nbaR)

# Use NBA package to make RLE 2024  plot  using  Van Deventer 2019 methods
pd_rle24sa_count <- rle24sa_sum %>%
    rename(`Critically Endangered` = CR, 
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle24sa_barplot_count <- nba_plot(pd_rle24sa_count,
                  `zone`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                SAVE = NULL)


#export the 2024 plot of counts 
ggsave(
  filename = "outputs/rle24sa_riv_barplot_count.jpeg", # File name
  plot = rle24sa_barplot_count,                  # Plot object
  device = "jpeg",                        # File format
  width = 12, height = 6, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

# Use NBA package to make RLE 2024  plot  using  IUCN RLE v2
pd_rle24_count <- rle24_sum %>%
    rename(`Critically Endangered` = CR, 
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle24_barplot_count <- nba_plot(pd_rle24_count,
                  `zone`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                SAVE = NULL)


#export the 2024 plot of counts 
ggsave(
  filename = "outputs/rle24_riv_barplot_count.jpeg", # File name
  plot = rle24_barplot_count,                  # Plot object
  device = "jpeg",                        # File format
  width = 12, height = 6, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

# Use NBA package to make RLE 2018  plot  using  Nel 2011 methods
pd_rle18sa_count <- rle18sa_sum %>%
    rename(`Critically Endangered` = CR, 
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle18sa_barplot_count <- nba_plot(pd_rle18sa_count,
                  `zone`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                SAVE = NULL)


#export the graph
ggsave(
  filename = "outputs/rle18sa_riv_barplot_count.jpeg", # File name
  plot = rle18sa_barplot_count,                  # Plot object
  device = "jpeg",                        # File format
  width = 16, height = 12, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

## Make plots of extent per slope zone per RLE SA methods  #########################################################

# 2024  plots of extent of RLE SA 
pd_rle24sa_ext <- rle24sa_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle24sa_barplot_ext <- nba_plot(pd_rle24sa_ext,
                  `zone`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SAVE = NULL)

rle24sa_barplot_ext

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle24sa_riv_barplot_ext.jpeg", # File name
  plot = rle24sa_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 16, height = 12, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

# 2018 plots of extent of RLE SA 

pd_rle18sa_ext <- rle18sa_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle18sa_barplot_ext <- nba_plot(pd_rle18sa_ext,
                  `zone`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SAVE = NULL)

rle18sa_barplot_ext

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle18sa_riv_barplot_ext.jpeg", # File name
  plot = rle18sa_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 16, height = 12, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

```

Make Maps

```{r}

```
